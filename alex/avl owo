// avl.cpp : Este archivo contiene la función "main". La ejecución del programa comienza y termina ahí.
//

#include <iostream>
#include <vector>
#include <cmath>
using namespace std;
template<class T>
struct nodo {
    T v;
    nodo* nodos[2];
    int altura;
    int dif_altura;
    nodo(T valor) {
        v = valor;
        nodos[0] = nodos[1] = 0;
        altura = 0;
        dif_altura = 0;
    }
};
template <class T>
class ArbolBinario {
public:
    nodo<T>* root = NULL;
    int altura = 0;
    bool find(nodo<T>**& p, T n, vector<nodo<T>**> &vec);
    void add(T n);
    void del(T n);
    void print(nodo<T>* n);

    bool turno = 0;

};
template<class T>
bool ArbolBinario<T>::find(nodo<T>**& p, T n, vector<nodo<T>**> &vec) {
    p = &root;
    for (;*p && (*p)->v != n;p = &(*p)->nodos[(*p)->v < n])
        vec.push_back(p);
    vec.push_back(p);
    
    return (*p && (*p)->v == n);
}
template <class T>
void ArbolBinario<T>::add(T n) {
    nodo<T>** p;
    vector<nodo<T>**> vec;
    if (!find(p, n, vec)) {
        *p = new nodo<T>(n);
        for (int i = (int)vec.size() - 1; i >= 0;i--) {
            if ((*vec[i])->nodos[0] && (*vec[i])->nodos[1]) {
                if (((*vec[i])->altura == (*vec[i])->nodos[0]->altura) || ((*vec[i])->altura == (*vec[i])->nodos[1]->altura)) 
                    (*vec[i])->altura++;                                  
                (*vec[i])->dif_altura = (*vec[i])->nodos[1]->altura - (*vec[i])->nodos[0]->altura;
            }               
            else {
                (*vec[i])->altura++;
                if ((*vec[i])->nodos[0]) 
                    (*vec[i])->dif_altura = -(*vec[i])->nodos[0]->altura;              
                else if ((*vec[i])->nodos[1]) 
                    (*vec[i])->dif_altura = (*vec[i])->nodos[1]->altura;                
            }
            //std::cout << (*vec[i])->v << " " << (*vec[i])->dif_altura << "\n";
            if ((*vec[i])->dif_altura == 2 && (*vec[i + 1])->dif_altura == 1) {
                nodo<T>* tmp1 = (*vec[i + 1])->nodos[0];
                nodo<T>* tmp2 = *vec[i];
                *vec[i] = *vec[i + 1];
                tmp2->nodos[1] = tmp1;
                tmp2->altura = tmp2->altura - 2;
                (*vec[i])->nodos[0] = tmp2;
            }
            else if ((*vec[i])->dif_altura == -2 && (*vec[i + 1])->dif_altura == -1) {
                nodo<T>* tmp1 = (*vec[i + 1])->nodos[1];
                nodo<T>* tmp2 = *vec[i];
                *vec[i] = *vec[i + 1];
                tmp2->nodos[0] = tmp1;
                tmp2->altura = tmp2->altura - 2;
                (*vec[i])->nodos[1] = tmp2;
            }
            else if ((*vec[i])->dif_altura == -2 || (*vec[i])->dif_altura == 2) {
                nodo<T>* tmp1 = (*vec[i + 2])->nodos[0];
                nodo<T>* tmp2 = (*vec[i + 2])->nodos[1];
                nodo<T>* tmp3 = *vec[i];
                nodo<T>* tmp4 = *vec[i + 1];
                *vec[i] = *vec[i + 2];
                (*vec[i])->nodos[tmp3->v > (*vec[i])->v] = tmp3;
                (*vec[i])->nodos[tmp4->v > (*vec[i])->v] = tmp4;
                (*vec[i])->nodos[0]->nodos[1] = tmp1;
                (*vec[i])->nodos[1]->nodos[0] = tmp2;
                tmp3->altura = tmp3->altura - 2;
                tmp4->altura--;
                (*vec[i])->altura++;
            }

        }       
        //cout << endl;
    }
    
}
template <class T>
void ArbolBinario<T>::del(T n) {
    nodo<T>** p;
    vector<nodo<T>*> vec;
    if (find(p, n,vec)) {
        if ((*p)->nodos[0] != 0 && (*p)->nodos[1] != 0) {
            nodo<T>** q = &(*p)->nodos[turno];
            turno = !turno;
            for (;(*q)->nodos[turno];q = &(*q)->nodos[turno]);
            (*p)->v = (*q)->v;
            p = q;
        }
        nodo<T>* tmp = *p;
        *p = (*p)->nodos[(*p)->nodos[1] != 0];
        delete tmp;
    }
}
template<class T>
void ArbolBinario<T>::print(nodo<T>* n) {
    if (!n)
        return;
    print(n->nodos[0]);
    cout << n->v << "-"<< n->altura << " ";
    print(n->nodos[1]);
}
int main()
{

    ArbolBinario<int> b;

    vector<int> aaa;
    for (int i = 0; i < 6;i++) {
        aaa.push_back(rand() % 20);
        b.add(aaa[i]);  
    }
    b.add(10);
    for (auto i : aaa)
        cout << i<< " ";
    b.print(b.root);
    cout << endl;
}
